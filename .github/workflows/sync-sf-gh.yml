name: Sync Sourceforge to GitHub
on:
  workflow_dispatch:
jobs:
  sync-sf-to-gh:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2.7.0
      with:
        # Repository name with owner. For example, actions/checkout
        repository: "saga-gis/saga-gis"
        # The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.
        # ref: # optional
        # Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.
        # We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.
        # [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
        # token: # optional, default is ${{ github.token }}
        # SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.
        # We recommend using a service account with the least permissions necessary.
        # [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
        #ssh-key: # optional
        # Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example, `ssh-keyscan github.com`. The public key for github.com is always implicitly added.
        # ssh-known-hosts: # optional
        # Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes` and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to configure additional hosts.
        # ssh-strict: # optional, default is true
        # Whether to configure the token or SSH key with the local git config
        # persist-credentials: # optional, default is true
        # Number of commits to fetch. 0 indicates all history for all branches and tags.
        fetch-depth: 0
        # Whether to download Git-LFS files
        lfs: true
        # Whether to checkout submodules: `true` to checkout submodules or `recursive` to recursively checkout submodules.
        # When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are converted to HTTPS.
        submodules: true
    - run: ls -la
    # - run: git clone --mirror git://git.code.sf.net/p/saga-gis/code saga-gis-code.git
    # - run: git clone --depth 1 git://git.code.sf.net/p/saga-gis/code saga-gis-code.git
    - run: git clone --mirror git://git.code.sf.net/p/saga-gis/code saga-gis-code.git
    - run: ls -la
    # - run: cd saga-gis-code.git
    - run: ls -la
      working-directory: saga-gis-code.git
    # - run: |
    #     git remote add github "https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/echoix/saga-gis.git"
    #     git push --mirror github
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - run: git remote add github "https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/echoix/saga-gis.git"
      env:
        # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.PAT }}
      working-directory: saga-gis-code.git
    - run: git push --mirror --atomic github
      working-directory: saga-gis-code.git
